function Block.new 0
push constant 7
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 2
push argument 1
pop this 0
push argument 2
pop this 1
push constant 0
pop this 6
push pointer 0
call Block.getType 1
pop temp 0
push pointer 0
call Block.getCoordinates 1
pop temp 0
push pointer 0
return
function Block.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Block.draw 2
push argument 0
pop pointer 0
label WHILE_EXP0
push local 0
push constant 4
lt
not
if-goto WHILE_END0
push local 0
push this 5
add
pop pointer 1
push that 0
pop local 1
push constant 0
push local 1
add
pop pointer 1
push that 0
push constant 1
push local 1
add
pop pointer 1
push that 0
push constant 2
push local 1
add
pop pointer 1
push that 0
push constant 3
push local 1
add
pop pointer 1
push that 0
call Screen.drawRectangle 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Block.show 0
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push pointer 0
call Block.draw 1
pop temp 0
push constant 0
return
function Block.hide 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push pointer 0
call Block.draw 1
pop temp 0
push constant 0
return
function Block.getType 0
push argument 0
pop pointer 0
push constant 4
call Array.new 1
pop this 4
push constant 0
push this 4
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push this 4
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push this 4
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push this 4
add
push constant 5
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Block.getCoordinates 4
push argument 0
pop pointer 0
push constant 0
pop local 0
push constant 4
call Array.new 1
pop this 5
label WHILE_EXP0
push local 0
push constant 4
lt
not
if-goto WHILE_END0
push local 0
push this 5
add
push constant 4
call Array.new 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push this 5
add
pop pointer 1
push that 0
pop local 3
push local 0
push this 4
add
pop pointer 1
push that 0
push constant 4
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 0
push this 2
push local 0
push this 4
add
pop pointer 1
push that 0
call Math.multiply 2
add
pop local 2
push constant 2
push local 0
push this 4
add
pop pointer 1
push that 0
call Math.multiply 2
pop local 1
push constant 0
push local 3
add
push local 2
push local 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 3
add
push this 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 3
add
push local 2
push this 2
add
push local 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push local 3
add
push this 1
push this 2
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END0
label IF_FALSE0
push this 0
push this 2
push local 0
push this 4
add
pop pointer 1
push that 0
push constant 4
sub
call Math.multiply 2
add
pop local 2
push constant 2
push local 0
push this 4
add
pop pointer 1
push that 0
push constant 4
sub
call Math.multiply 2
pop local 1
push constant 0
push local 3
add
push local 2
push local 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 3
add
push this 1
push this 2
add
push constant 2
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 3
add
push local 2
push this 2
add
push local 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push local 3
add
push this 1
push constant 2
push this 2
call Math.multiply 2
add
push constant 2
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Block.getWidthOrHeight 7
push argument 0
pop pointer 0
push argument 1
pop local 6
push constant 0
pop local 0
push constant 0
pop local 1
push constant 8
call Array.new 1
pop local 2
label WHILE_EXP0
push local 0
push constant 4
lt
not
if-goto WHILE_END0
push local 0
push this 5
add
pop pointer 1
push that 0
pop local 3
push local 1
push local 2
add
push local 6
push local 3
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
push local 1
push local 2
add
push local 6
push constant 2
add
push local 3
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
push local 6
call Block.getMaximum 2
pop local 4
push pointer 0
push local 6
call Block.getMinimum 2
pop local 5
push local 4
push local 5
sub
return
function Block.getMinimum 6
push argument 0
pop pointer 0
push argument 1
pop local 5
push constant 0
pop local 0
push constant 0
pop local 1
push constant 8
call Array.new 1
pop local 3
label WHILE_EXP0
push local 0
push constant 4
lt
not
if-goto WHILE_END0
push local 0
push this 5
add
pop pointer 1
push that 0
pop local 4
push local 1
push local 3
add
push local 5
push local 4
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
push local 1
push local 3
add
push local 5
push constant 2
add
push local 4
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
push local 3
add
pop pointer 1
push that 0
push constant 1
push local 3
add
pop pointer 1
push that 0
push constant 2
push local 3
add
pop pointer 1
push that 0
push constant 3
push local 3
add
pop pointer 1
push that 0
push constant 4
push local 3
add
pop pointer 1
push that 0
push constant 5
push local 3
add
pop pointer 1
push that 0
push constant 6
push local 3
add
pop pointer 1
push that 0
push constant 7
push local 3
add
pop pointer 1
push that 0
call Math.min 2
call Math.min 2
call Math.min 2
call Math.min 2
call Math.min 2
call Math.min 2
call Math.min 2
pop local 2
push local 2
return
function Block.getMaximum 6
push argument 0
pop pointer 0
push argument 1
pop local 5
push constant 0
pop local 0
push constant 0
pop local 1
push constant 8
call Array.new 1
pop local 3
label WHILE_EXP0
push local 0
push constant 4
lt
not
if-goto WHILE_END0
push local 0
push this 5
add
pop pointer 1
push that 0
pop local 4
push local 1
push local 3
add
push local 5
push local 4
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
push local 1
push local 3
add
push local 5
push constant 2
add
push local 4
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
push local 3
add
pop pointer 1
push that 0
push constant 1
push local 3
add
pop pointer 1
push that 0
push constant 2
push local 3
add
pop pointer 1
push that 0
push constant 3
push local 3
add
pop pointer 1
push that 0
push constant 4
push local 3
add
pop pointer 1
push that 0
push constant 5
push local 3
add
pop pointer 1
push that 0
push constant 6
push local 3
add
pop pointer 1
push that 0
push constant 7
push local 3
add
pop pointer 1
push that 0
call Math.max 2
call Math.max 2
call Math.max 2
call Math.max 2
call Math.max 2
call Math.max 2
call Math.max 2
pop local 2
push local 2
return
function Block.rotate 9
push argument 0
pop pointer 0
push pointer 0
push constant 1
call Block.getWidthOrHeight 2
pop local 4
push pointer 0
push constant 0
call Block.getWidthOrHeight 2
pop local 5
push constant 0
push this 5
add
pop pointer 1
push that 0
pop local 0
push pointer 0
push constant 0
call Block.getMinimum 2
push local 5
push constant 2
call Math.divide 2
add
pop local 6
push pointer 0
push constant 1
call Block.getMinimum 2
push local 4
push constant 2
call Math.divide 2
add
pop local 7
push constant 0
pop local 1
push this 6
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 6
neg
pop local 8
goto IF_END0
label IF_FALSE0
push constant 6
pop local 8
label IF_END0
push pointer 0
call Block.hide 1
pop temp 0
label WHILE_EXP0
push local 1
push constant 4
lt
not
if-goto WHILE_END0
push local 1
push this 5
add
pop pointer 1
push that 0
pop local 0
push constant 0
push local 0
add
pop pointer 1
push that 0
pop local 3
push constant 0
push local 0
add
push local 6
push local 7
add
push constant 1
push local 0
add
pop pointer 1
push that 0
sub
push this 2
sub
push local 8
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 0
add
push local 3
push local 7
add
push local 6
sub
push local 8
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 0
add
push constant 0
push local 0
add
pop pointer 1
push that 0
push this 2
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push local 0
add
push constant 1
push local 0
add
pop pointer 1
push that 0
push this 2
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push this 6
not
pop this 6
push pointer 0
call Block.show 1
pop temp 0
push constant 0
return
function Block.setDirection 0
push argument 0
pop pointer 0
push argument 1
pop this 3
push constant 0
return
function Block.move 2
push argument 0
pop pointer 0
push constant 0
pop local 1
push pointer 0
call Block.hide 1
pop temp 0
push this 3
push constant 1
eq
push pointer 0
push constant 0
call Block.getMinimum 2
push constant 164
gt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
label WHILE_EXP0
push local 1
push constant 4
lt
not
if-goto WHILE_END0
push local 1
push this 5
add
pop pointer 1
push that 0
pop local 0
push constant 0
push local 0
add
push constant 0
push local 0
add
pop pointer 1
push that 0
push constant 12
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 0
add
push constant 2
push local 0
add
pop pointer 1
push that 0
push constant 12
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
label IF_FALSE0
push this 3
push constant 2
eq
push pointer 0
push constant 0
call Block.getMaximum 2
push constant 273
lt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
label WHILE_EXP1
push local 1
push constant 4
lt
not
if-goto WHILE_END1
push local 1
push this 5
add
pop pointer 1
push that 0
pop local 0
push constant 0
push local 0
add
push constant 0
push local 0
add
pop pointer 1
push that 0
push constant 12
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 0
add
push constant 2
push local 0
add
pop pointer 1
push that 0
push constant 12
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
label IF_FALSE1
push pointer 0
call Block.show 1
pop temp 0
push constant 0
return
function Block.descend 2
push argument 0
pop pointer 0
push pointer 0
call Block.hide 1
pop temp 0
label WHILE_EXP0
push local 1
push constant 4
lt
not
if-goto WHILE_END0
push local 1
push this 5
add
pop pointer 1
push that 0
pop local 0
push constant 1
push local 0
add
push constant 1
push local 0
add
pop pointer 1
push that 0
push constant 12
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push local 0
add
push constant 3
push local 0
add
pop pointer 1
push that 0
push constant 12
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push pointer 0
call Block.show 1
pop temp 0
push constant 0
return
function Block.atBottom 1
push argument 0
pop pointer 0
push pointer 0
push constant 1
call Block.getMaximum 2
push constant 235
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
pop local 0
label IF_FALSE0
push local 0
return
function Block.obstructionCheck 10
push argument 0
pop pointer 0
push constant 0
pop local 0
push constant 4
call Array.new 1
pop local 2
push constant 4
call Array.new 1
pop local 3
label WHILE_EXP0
push local 0
push constant 4
lt
not
if-goto WHILE_END0
push local 0
push this 5
add
pop pointer 1
push that 0
pop local 1
push local 0
push local 2
add
push constant 3
push local 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push local 3
add
push constant 2
push local 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 4
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push constant 4
lt
not
if-goto WHILE_END1
push local 0
push this 5
add
pop pointer 1
push that 0
pop local 1
push constant 3
push local 1
add
pop pointer 1
push that 0
push constant 12
add
pop local 5
push local 5
push constant 0
push local 2
add
pop pointer 1
push that 0
eq
push constant 2
push local 1
add
pop pointer 1
push that 0
push constant 0
push local 3
add
pop pointer 1
push that 0
eq
and
push local 5
push constant 1
push local 2
add
pop pointer 1
push that 0
eq
push constant 2
push local 1
add
pop pointer 1
push that 0
push constant 1
push local 3
add
pop pointer 1
push that 0
eq
and
or
push local 5
push constant 2
push local 2
add
pop pointer 1
push that 0
eq
push constant 2
push local 1
add
pop pointer 1
push that 0
push constant 2
push local 3
add
pop pointer 1
push that 0
eq
and
or
push local 5
push constant 3
push local 2
add
pop pointer 1
push that 0
eq
push constant 2
push local 1
add
pop pointer 1
push that 0
push constant 3
push local 3
add
pop pointer 1
push that 0
eq
and
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
add
pop local 0
goto IF_END0
label IF_FALSE0
push constant 16384
push constant 3
push local 1
add
pop pointer 1
push that 0
push constant 32
call Math.multiply 2
add
push constant 2
push local 1
add
pop pointer 1
push that 0
push constant 16
call Math.divide 2
add
pop local 6
push local 6
call Memory.peek 1
pop local 6
push local 6
call ConvertToBin.main 1
pop temp 0
push constant 16000
push constant 2
push local 1
add
pop pointer 1
push that 0
push constant 2
push local 1
add
pop pointer 1
push that 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
add
call Memory.peek 1
pop local 8
push constant 16384
push local 5
push constant 32
call Math.multiply 2
add
push constant 2
push local 1
add
pop pointer 1
push that 0
push constant 16
call Math.divide 2
add
pop local 7
push local 7
call Memory.peek 1
pop local 7
push local 7
call ConvertToBin.main 1
pop temp 0
push constant 16000
push constant 2
push local 1
add
pop pointer 1
push that 0
push constant 2
push local 1
add
pop pointer 1
push that 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
add
call Memory.peek 1
pop local 9
push local 8
push constant 1
eq
push local 9
push constant 1
eq
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
pop local 4
label IF_FALSE1
push local 0
push constant 1
add
pop local 0
label IF_END0
goto WHILE_EXP1
label WHILE_END1
push local 4
return
