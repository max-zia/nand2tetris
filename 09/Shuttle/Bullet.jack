/** Implements a graphical bullet. */

class Bullet {

	field int location; // location of the bullet's top left corner in RAM

	/** Constructs a new bullet with a given location and size. */
	constructor Bullet new(int startLocation) {
		let location = startLocation;
		return this;
	}

	/** Disposes this bullet. */
	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}

	/** Draws the bullet on the screen. */
	method void draw() {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 0);
		do Memory.poke(memAddress+64, 0);
		do Memory.poke(memAddress+96, 384);
		do Memory.poke(memAddress+128, 384);
		do Memory.poke(memAddress+160, 576);
		do Memory.poke(memAddress+192, 384);
		do Memory.poke(memAddress+224, 960);
		do Memory.poke(memAddress+256, 960);
		do Memory.poke(memAddress+288, 960);
		do Memory.poke(memAddress+320, 960);
		do Memory.poke(memAddress+352, 960);
		do Memory.poke(memAddress+384, 960);
		do Memory.poke(memAddress+416, 960);
		do Memory.poke(memAddress+448, 960);
		do Memory.poke(memAddress+480, 0);
		return;
	}

	/** Erases the bullet from the screen. */
	method void erase() {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 0);
		do Memory.poke(memAddress+64, 0);
		do Memory.poke(memAddress+96, 0);
		do Memory.poke(memAddress+128, 0);
		do Memory.poke(memAddress+160, 0);
		do Memory.poke(memAddress+192, 0);
		do Memory.poke(memAddress+224, 0);
		do Memory.poke(memAddress+256, 0);
		do Memory.poke(memAddress+288, 0);
		do Memory.poke(memAddress+320, 0);
		do Memory.poke(memAddress+352, 0);
		do Memory.poke(memAddress+384, 0);
		do Memory.poke(memAddress+416, 0);
		do Memory.poke(memAddress+448, 0);
		do Memory.poke(memAddress+480, 0);
		return;
	}

	/** Animate the bullet moving up and off the screen. */
	method void animate() {
		while (location > 0) {
			do erase();
			let location = (location - 32);
			do draw();
			do Sys.wait(5);
		}
		do erase();
		return;
	}

}