/** Implements a graphical shuttle. */

class Shuttle {
	
	field int location; // location of the shuttle's top left corner in RAM

	/** Constructs a new shuttle with a given location and size. */
	constructor Shuttle new(int startLocation) {
		let location = startLocation;
		do draw();
		return this;
	}

	/** De-allocates this shuttle and frees the memory space. */
	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}

	/** Draws the shuttle on the screen. */
	method void draw() {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 384);
		do Memory.poke(memAddress+32, 960);
		do Memory.poke(memAddress+64, 2016);
		do Memory.poke(memAddress+96, 4080);
		do Memory.poke(memAddress+128, 4104);
		do Memory.poke(memAddress+160, 8184);
		do Memory.poke(memAddress+192, 4104);
		do Memory.poke(memAddress+224, 8184);
		do Memory.poke(memAddress+256, 8184);
		do Memory.poke(memAddress+288, 4104);
		do Memory.poke(memAddress+320, 8184);
		do Memory.poke(memAddress+352, 8184);
		do Memory.poke(memAddress+384, 4104);
		do Memory.poke(memAddress+416, 16380);
		do Memory.poke(memAddress+448, 32766);
		do Memory.poke(memAddress+480, -1);
		return;
	}

	/** Erases the shuttle from the screen. */
	method void erase() {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 0);
		do Memory.poke(memAddress+64, 0);
		do Memory.poke(memAddress+96, 0);
		do Memory.poke(memAddress+128, 0);
		do Memory.poke(memAddress+160, 0);
		do Memory.poke(memAddress+192, 0);
		do Memory.poke(memAddress+224, 0);
		do Memory.poke(memAddress+256, 0);
		do Memory.poke(memAddress+288, 0);
		do Memory.poke(memAddress+320, 0);
		do Memory.poke(memAddress+352, 0);
		do Memory.poke(memAddress+384, 0);
		do Memory.poke(memAddress+416, 0);
		do Memory.poke(memAddress+448, 0);
		do Memory.poke(memAddress+480, 0);
		return;
	}

	/** Simulates effect of gravity by moving shuttle down 1 pixel. */
	method void shuttleGravity() {
		if (location < 7648) {
			do erase();
			let location = location + 32;
			do draw();
		}
		return;
	}

	/** Moves the shuttle up 1 pixel. */
	method void moveUp() {
		if (location > 1) {
			do erase();
			let location = location - 32;
			do draw();
		}
		return;
	}

	/** Moves the shuttle left 1 pixel. */
	method void moveLeft() {
		if (location > 1) {
			do erase();
			let location = location - 1;
			do draw();
		}
		return;
	}

	/** Moves the shuttle right 1 pixel. */
	method void moveRight() {
		if ((location + 512) < 8191) {
			do erase();
			let location = location + 1;
			do draw();
		}
		return;
	}

	method int getLocation() {
		return location;
	}
}