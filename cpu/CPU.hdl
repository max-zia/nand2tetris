/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // INSTRUCTION DECODING
    DMux(in=true, sel=instruction[15], a=DMuxOutA, b=DMuxOutB);
    Mux16(
        a=false, 
        b=instruction, 
        sel=DMuxOutB, 
        out[0]=j3,      // CPU control bits parsed from instruction
        out[1]=j2,      // These will all be 0 in case of A-instruction
        out[2]=j1,
        out[3]=writeM,  // out[3]=d3, which facilitates write to M
        out[4]=d2,
        out[5]=d1,
        out[6]=c6,
        out[7]=c5,
        out[8]=c4,
        out[9]=c3,
        out[10]=c2,
        out[11]=c1,
        out[12]=a
    );
    Mux(
        a=d1,           // d1 facilitates write to ARegister
        b=true, 
        sel=DMuxOutA, 
        out=ARegisterLoad
    );

    // INSTRUCTION EXECUTION
    Mux16(
        a=feedback,             // feedback is ALU output
        b=instruction, 
        sel=DMuxOutA,           // sel is determined by instruction decoding
        out=ARegisterIn
    );
    ARegister(
        in=ARegisterIn, 
        load=ARegisterLoad, 
        out=ARegisterOut,
        out[0..14]=addressM    // Address in data memory (of M)
    );
    Mux16(
        a=ARegisterOut, 
        b=inM, 
        sel=a, 
        out=ALUInputY
    );
    ALU(
        x=ALUInputX,            // ALU inputs
        y=ALUInputY,
        zx=c1,                  // ALU control bits       
        nx=c2,
        zy=c3,
        ny=c4,
        f=c5,
        no=c6,
        zr=zr,                  // ALU output status bits
        ng=ng,
        out=outM,               // M value output
        out=feedback            // Feedback bit for DRegister and Mux16
    );
    DRegister(
        in=feedback,
        load=d2,                // d2 facilitates write to DRegister
        out=ALUInputX
    );
    PC(
        in=ARegisterOut,
        reset=reset,
        load=PCLoad,            // load determined based on NIF tests
        inc=true,               // inc always true since, in our PC, it is
        out[0..14]=pc           // always overridden by load and reset
    );

    // NEXT INSTRUCTION FETCHING (NIF)
    // Parts required for jump condition tests
    Or(a=j1, b=j2, out=j1Orj2);
    Not(in=zr, out=Notzr);
    Not(in=ng, out=Notng);
    And(a=j1, b=j2, out=j1Andj2);

    // 8 jump condition tests for Mux8Way
    Or(a=j1Orj2, b=j3, out=Test1);
    And(a=Notzr, b=Notng, out=Test2);
    // Test 3 is simply zr
    Or(a=zr, b=Notng, out=Test4);
    // Test 5 is simply ng
    // Test 6 is simply Notzr
    Or(a=zr, b=ng, out=Test7);
    And(a=j1Andj2, b=j3, out=Test8);

    // Apply jump condition using Mux8Way selectors and see whether
    // jump condition is satisfied
    Mux8Way(
        a=Test1,
        b=Test2,
        c=zr,
        d=Test4,
        e=ng,
        f=Notzr,
        g=Test7,
        h=Test8,
        sel[2]=j1,              // sel[2] is MSB
        sel[1]=j2,
        sel[0]=j3,              // sel[0] is LSB
        out=PCLoad
    );
}